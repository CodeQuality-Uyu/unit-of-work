name: New Package Version

on:
  push:
    branches:
      [
        uow,
        uow-abstractions,
        uow-efcore,
        uow-efcore-abstractions,
        uow-mongo,
        uow-mongo-abstractions,
      ]

env:
  package_name: ""

jobs:
  get_version:
    name: Get PR Title
    runs-on: ubuntu-latest
    steps:
    - name: Determine Package Name
      run: |
        if [ "${{ github.ref_name }}" == "uow" ]; then
          PACKAGE_NAME="CQ.UnitOfWork"
        elif [ "${{ github.ref_name }}" == "uow-abstractions" ]; then
          PACKAGE_NAME="CQ.UnitOfWork.Abstractions"
        elif [ "${{ github.ref_name }}" == "uow-efcore" ]; then
          PACKAGE_NAME="CQ.UnitOfWork.EfCore"
        elif [ "${{ github.ref_name }}" == "uow-efcore-abstractions" ]; then
          PACKAGE_NAME="CQ.UnitOfWork.EfCore.Abstractions"
        elif [ "${{ github.ref_name }}" == "uow-mongo" ]; then
          PACKAGE_NAME="CQ.UnitOfWork.MongoDriver"
        elif [ "${{ github.ref_name }}" == "uow-mongo-abstractions" ]; then
          PACKAGE_NAME="CQ.UnitOfWork.MongoDriver.Abstractions"
        else
          echo "Unknown branch. Exiting."
          exit 1
        fi
        echo "Package Name: $PACKAGE_NAME"

        echo "package_name=$PACKAGE_NAME" >> $GITHUB_ENV

    - name: Extract Version
      run: |
        REPO_NAME=$(basename ${{ github.repository }})
        
        # Get the last merged PR for the head branch
        LAST_PR=$(curl -s -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/$REPO_NAME/pulls?state=closed&base=${{env.package_name}}&sort=updated&direction=desc&per_page=1" \
          | jq -r 'map(select(.merged_at != null))[0]')
        
        # Extract the title of the last merged PR
        LAST_PR_TITLE=$(echo "$LAST_PR" | jq -r '.title')
        
        echo "Last Merged PR Title: $LAST_PR_TITLE"
        echo "pr_title=$LAST_PR_TITLE" >> $GITHUB_ENV
        
  build_pack_publish:
    name: Pack and Publish
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: get_version
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Install dependencies
      run: dotnet restore $package_name

    - name: Build
      run: dotnet build $package_name --configuration Release /p:Version=$pr_title
    
    - name: Pack
      run: dotnet pack $package_name --configuration Release /p:Version=$pr_title --no-build --output .
    
    - name: Show files
      run: ls -la
    
    # - name: Publish
    #   run: dotnet nuget push $package_name.$pr_title.nupkg --source https://api.nuget.org/v3/index.json --api-key ${NUGET_API_KEY}
    #   env:
    #     NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}

