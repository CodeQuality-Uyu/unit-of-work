name: New Package Version

on:
  push:
    branches:
      [
        uow,
        uow-abstractions,
        uow-efcore,
        uow-efcore-abstractions,
        uow-mongo,
        uow-mongo-abstractions,
      ]

env:
  DOTNET_VERSION: "8.0.x" # The .NET SDK version to use

jobs:
  get_version:
    name: Get PR Title
    runs-on: ubuntu-latest
    steps:
      - name: Get the latest merged PR
        run: |
          PR_URL=$(git log -1 --merges --pretty=format:"%b" | grep -Eo 'https://github.com/[^ ]+/pull/[0-9]+')
          echo "pr_url=$PR_URL" >> $GITHUB_ENV

      - name: Extract Version
        run: |
          PR_TITLE=$(curl -s -H "Accept: application/vnd.github.v3+json" "$pr_url" | jq -r '.title')
          
          echo "pr_title=$PR_TITLE" >> $GITHUB_ENV

  build_pack_publish:
    name: Pack and Publish
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: get-version
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Determine Package Name
      run: |
        if [ "${{ github.ref_name }}" == "uow" ]; then
          PACKAGE_NAME="CQ.UnitOfWork"
        elif [ "${{ github.ref_name }}" == "uow-abstractions" ]; then
          PACKAGE_NAME="CQ.UnitOfWork.Abstractions"
        elif [ "${{ github.ref_name }}" == "uow-efcore" ]; then
          PACKAGE_NAME="CQ.UnitOfWork.EfCore"
        elif [ "${{ github.ref_name }}" == "uow-efcore-abstractions" ]; then
          PACKAGE_NAME="CQ.UnitOfWork.EfCore.Abstractions"
        elif [ "${{ github.ref_name }}" == "uow-mongo" ]; then
          PACKAGE_NAME="CQ.UnitOfWork.MongoDriver"
        elif [ "${{ github.ref_name }}" == "uow-mongo-abstractions" ]; then
          PACKAGE_NAME="CQ.UnitOfWork.MongoDriver.Abstractions"
        else
          echo "Unknown branch. Exiting."
          exit 1
        fi
        echo "Package Name: $PACKAGE_NAME"

        echo "package_name=$PACKAGE_NAME" >> $GITHUB_ENV
    
    - name: Install dependencies
      run: dotnet restore $package_name

    - name: Build
      run: dotnet build $package_name --configuration Release /p:Version=$pr_title
    
    - name: Pack
      run: dotnet pack $package_name --configuration Release /p:Version=$pr_title --no-build --output .
    
    - name: Show files
      run: ls -la
    
    # - name: Publish
    #   run: dotnet nuget push $package_name.$pr_title.nupkg --source https://api.nuget.org/v3/index.json --api-key ${NUGET_API_KEY}
    #   env:
    #     NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}

